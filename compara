from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QDialog, QLabel, QLineEdit, QPushButton, QVBoxLayout,
    QMessageBox, QFormLayout, QTableWidget, QTableWidgetItem, QHeaderView, QAction, QWidget, QComboBox
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont, QPalette
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from produto import Produto, Base, Usuario, Tecnico, Empresa, EntradaMaterial, SaidaMaterial
from datetime import date

# Definir a conexão com o banco de dados SQLite
DATABASE_URL = "sqlite:///produtos.db"
engine = create_engine(DATABASE_URL, echo=True)
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

class SaidaMaterialDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Saída de Material")
        self.setStyleSheet("QDialog { background-color: #f0f0f0; }")

        layout = QFormLayout()

        self.combo_tecnico = QComboBox()
        tecnicos = session.query(Tecnico).all()
        for tecnico in tecnicos:
            self.combo_tecnico.addItem(tecnico.nome, tecnico.id)

        self.combo_usuario = QComboBox()
        usuarios = session.query(Usuario).all()
        for usuario in usuarios:
            self.combo_usuario.addItem(usuario.username, usuario.id)

        self.entry_ordem_servico = QLineEdit()
        self.entry_data = QLineEdit()
        self.entry_data.setText(date.today().strftime("%Y-%m-%d"))
        self.entry_local = QLineEdit()
        self.entry_num_patrimonio = QLineEdit()

        self.combo_produto = QComboBox()
        produtos = session.query(Produto).all()
        for produto in produtos:
            self.combo_produto.addItem(produto.nome, produto.id)

        layout.addRow(QLabel("Técnico:"), self.combo_tecnico)
        layout.addRow(QLabel("Usuário:"), self.combo_usuario)
        layout.addRow(QLabel("Ordem de Serviço:"), self.entry_ordem_servico)
        layout.addRow(QLabel("Data:"), self.entry_data)
        layout.addRow(QLabel("Local:"), self.entry_local)
        layout.addRow(QLabel("Número do Patrimônio:"), self.entry_num_patrimonio)
        layout.addRow(QLabel("Produto:"), self.combo_produto)

        salvar_button = QPushButton("Salvar")
        salvar_button.setStyleSheet(
            "QPushButton { background-color: #4CAF50; color: white; padding: 10px; border-radius: 5px; }")
        salvar_button.clicked.connect(self.salvar_saida)
        layout.addRow(salvar_button)

        self.setLayout(layout)

    def salvar_saida(self):
        tecnico_id = self.combo_tecnico.currentData()
        usuario_id = self.combo_usuario.currentData()
        ordem_servico = self.entry_ordem_servico.text()
        data = self.entry_data.text()
        local = self.entry_local.text()
        num_patrimonio = self.entry_num_patrimonio.text()
        produto_id = self.combo_produto.currentData()

        # Ajuste para capturar a quantidade do produto
        quantidade = 1  # Modifique conforme necessário, dependendo da lógica de sua aplicação

        saida = SaidaMaterial(
            tecnico_id=tecnico_id,
            usuario_id=usuario_id,
            ordem_servico=ordem_servico,
            data=data,
            local=local,
            num_patrimonio=num_patrimonio,
            produto_id=produto_id
        )

        produto = session.query(Produto).get(produto_id)
        produto.estoque -= quantidade

        session.add(saida)
        session.commit()

        QMessageBox.information(self, "Sucesso", "Saída de material registrada com sucesso!")
        self.close()

# Restante do código continua igual
