from venv import logger

from PyQt5 import QtWidgets, QtGui, QtCore
from banco_de_dados import session, Material, Estoque
from telas.tela_base import TelaBaseComESC


class TelaEstoque(TelaBaseComESC):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Estoque Total')
        self.setGeometry(100, 100, 800, 600)
        self.showMaximized()
        self.setStyleSheet("""
          QWidget {
                background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, 
                                                  stop:0 #e0e0e0, stop:1 #bdbdbd);
                color: #37474f;
                font-family: 'Roboto', sans-serif;
            }
            QLabel {
                background: none;
                border: none;
                padding: 0;
                margin: 0;
                font-size: 14px;
                font-weight: bold;
                color: #37474f;
            }
            QLineEdit {
                background-color: rgba(255, 255, 255, 0.8);
                border: 1px solid #78909c;
                border-radius: 6px;
                padding: 8px;
                font-size: 13px;
                color: #37474f;
            }
            QLineEdit:focus {
                border: 2px solid #546e7a;
            }
            QPushButton {
                background-color: #546e7a;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #607d8b;
            }
            QTableWidget {
                background-color: rgba(255, 255, 255, 0.8);
                border: 1px solid #78909c;
                border-radius: 6px;
                font-size: 13px;
                color: #37474f;
            }
            QHeaderView::section {
                background-color: #90a4ae;
                color: white;
                padding: 4px;
                font-size: 13px;
                font-weight: bold;
                border: none;
            }
            QTableWidget::item {
                padding: 4px;
            }
            QComboBox {
                background-color: #eceff1;
                border: 1px solid #90a4ae;
                border-radius: 6px;
                padding: 6px;
                min-width: 6em;
                color: #37474f;
            }
            QComboBox:hover {
                background-color: #cfd8dc;
            }
            QComboBox::drop-down {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 20px;
                border-left-width: 1px;
                border-left-color: #90a4ae;
                border-left-style: solid;
                border-top-right-radius: 3px;
                border-bottom-right-radius: 3px;
            }
            QComboBox::down-arrow {
                image: url(down_arrow.png);
            }
        """)
        self.init_ui()

    def init_ui(self):
        layout = QtWidgets.QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)

        title_label = QtWidgets.QLabel("Estoque Total")
        title_label.setAlignment(QtCore.Qt.AlignCenter)
        title_label.setStyleSheet("""
            font-size: 26px;
            font-weight: bold;
            color: #0D47A1;
            background-color: transparent;
            padding: 10px;
        """)
        layout.addWidget(title_label)

        self.campo_pesquisa = QtWidgets.QLineEdit()
        self.campo_pesquisa.setPlaceholderText("Pesquisar por Nome ou ID...")
        self.campo_pesquisa.textChanged.connect(self.filtrar_dados)
        layout.addWidget(self.campo_pesquisa)

        self.combo_status = QtWidgets.QComboBox()
        self.combo_status.addItems(["Todos", "Normal", "Alerta", "Urgente"])
        self.combo_status.currentTextChanged.connect(self.filtrar_dados)
        layout.addWidget(self.combo_status)

        self.tabela_estoque = QtWidgets.QTableWidget()
        self.tabela_estoque.setColumnCount(6)

        self.tabela_estoque.setColumnWidth(0, 80)  # ID
        self.tabela_estoque.setColumnWidth(1, 200)  # Nome do Produto
        self.tabela_estoque.setColumnWidth(2, 100)  # Quantidade
        self.tabela_estoque.setColumnWidth(3, 100)  # Unidade de Medida
        self.tabela_estoque.setColumnWidth(4, 140)  # Quantidade Mínima
        self.tabela_estoque.setColumnWidth(5, 100)  # Status

        self.tabela_estoque.setHorizontalHeaderLabels(
            ['ID', 'Nome do Produto', 'Quantidade', 'Unidade de Medida', 'Quantidade Mínima', 'Status'])
        self.tabela_estoque.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)

        atualizar_button = QtWidgets.QPushButton('Atualizar Estoque')
        atualizar_button.setFixedSize(200, 50)
        atualizar_button.clicked.connect(self.carregar_dados)

        layout.addWidget(atualizar_button)
        layout.addWidget(self.tabela_estoque)
        self.setLayout(layout)

        self.carregar_dados()
    def carregar_dados(self):
        try:
            self.tabela_estoque.setRowCount(0)

            estoques = session.query(
                Material.id,
                Material.nome,
                Estoque.quantidade,
                Estoque.valor_minimo,
                Estoque.status,
                Estoque.unidade_medida
            ).join(Estoque).all()

            logger.debug(f"Número de itens recuperados: {len(estoques)}")

            for estoque in estoques:
                row_position = self.tabela_estoque.rowCount()
                self.tabela_estoque.insertRow(row_position)

                logger.debug(f"Processando item: ID={estoque.id}, Nome={estoque.nome}, "
                             f"Quantidade={estoque.quantidade}, Unidade={estoque.unidade_medida}")

                # ID do Material
                self.tabela_estoque.setItem(row_position, 0, QtWidgets.QTableWidgetItem(str(estoque.id)))

                # Nome do Produto
                self.tabela_estoque.setItem(row_position, 1, QtWidgets.QTableWidgetItem(estoque.nome))

                # Quantidade
                quantidade = estoque.quantidade if estoque.quantidade is not None else 0
                self.tabela_estoque.setItem(row_position, 2, QtWidgets.QTableWidgetItem(str(quantidade)))

                # Unidade de Medida
                unidade_medida = estoque.unidade_medida if estoque.unidade_medida is not None else 'Unidade'
                logger.debug(f"Unidade de medida para o item {estoque.id}: {unidade_medida}")
                self.tabela_estoque.setItem(row_position, 3, QtWidgets.QTableWidgetItem(unidade_medida))

                # Valor Mínimo (editável)
                valor_minimo_item = QtWidgets.QTableWidgetItem(
                    str(estoque.valor_minimo) if estoque.valor_minimo is not None else '')
                self.tabela_estoque.setItem(row_position, 4, valor_minimo_item)

                # Status
                status_item = QtWidgets.QTableWidgetItem(
                    estoque.status if estoque.status is not None else 'Desconhecido')
                self.tabela_estoque.setItem(row_position, 5, status_item)

                self.atualizar_status(row_position)

            self.tabela_estoque.itemChanged.connect(self.atualizar_valor_minimo)
        except Exception as e:
            logger.exception("Erro ao carregar dados")
            QtWidgets.QMessageBox.critical(self, 'Erro', f'Erro ao carregar dados: {e}')

    def atualizar_status(self, row):
        try:
            valor_minimo_item = self.tabela_estoque.item(row, 4)
            quantidade_item = self.tabela_estoque.item(row, 2)

            if valor_minimo_item is None or not valor_minimo_item.text() or quantidade_item is None or not quantidade_item.text():
                return

            valor_minimo = float(valor_minimo_item.text())
            quantidade = float(quantidade_item.text())

            status_item = self.tabela_estoque.item(row, 5)
            if status_item is None:
                status_item = QtWidgets.QTableWidgetItem()
                self.tabela_estoque.setItem(row, 5, status_item)

            if quantidade <= valor_minimo:
                status_item.setBackground(QtGui.QColor('red'))
                status_item.setText('Urgente')
            elif quantidade <= 1.5 * valor_minimo:
                status_item.setBackground(QtGui.QColor('yellow'))
                status_item.setText('Alerta')
            else:
                status_item.setBackground(QtGui.QColor('white'))
                status_item.setText('Normal')
        except Exception as e:
            logger.error(f"Erro ao atualizar status da linha {row}: {e}")

    def atualizar_valor_minimo(self, item):
        try:
            if item.column() == 4:  # Coluna do valor mínimo
                row = item.row()
                material_id = int(self.tabela_estoque.item(row, 0).text())

                novo_valor_minimo = float(item.text())
                estoque = session.query(Estoque).filter_by(material_id=material_id).first()
                if estoque:
                    estoque.valor_minimo = novo_valor_minimo
                    session.commit()

                self.atualizar_status(row)
        except Exception as e:
            logger.error(f"Erro ao atualizar valor mínimo: {e}")
            QtWidgets.QMessageBox.critical(self, 'Erro', f'Erro ao atualizar valor mínimo: {e}')

    def filtrar_dados(self):
        texto_pesquisa = self.campo_pesquisa.text().lower()
        status_filtro = self.combo_status.currentText()

        for row in range(self.tabela_estoque.rowCount()):
            item_id = self.tabela_estoque.item(row, 0)
            item_nome = self.tabela_estoque.item(row, 1)
            item_status = self.tabela_estoque.item(row, 5)

            id_text = item_id.text().lower() if item_id else ''
            nome_text = item_nome.text().lower() if item_nome else ''
            status_text = item_status.text() if item_status else ''

            match_texto = texto_pesquisa in id_text or texto_pesquisa in nome_text
            match_status = status_filtro == "Todos" or status_text == status_filtro

            self.tabela_estoque.setRowHidden(row, not (match_texto and match_status))
